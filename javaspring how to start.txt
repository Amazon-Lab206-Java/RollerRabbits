How to start java spring

when starting a new project, be careful where you start it (work bench location.

com.cadence.projectname.controllers

step 0. 
file> new > spring starter project

new spring start project dependencies
1. jpa, mysql, web, dev tools, spring-boot-starter-security

2. src/main/resources
application.properties
spring.mvc.view.prefix: /WEB-INF/
spring.datasource.url=jdbc:mysql://localhost:3306/<<YOUR_SCHEMA>>
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update

3. 
create packages under src/main/java

naming convention:
***com.cadence.PROJECTNAME.controllers

configuration
controller
model
service
repository (THIS IS AN INTERFACE, not a class)
validator

Under these packages, you can create individual .java files.

4. 
pom.xml>dependencies>add
org.apache.tomcat.embed
               tomcat-embed-jasper
javax.servlet
               jstl

 <groupId>org.springframework.boot
        <artifactId>spring-boot-starter-security
5. 
src/main/webapp/WEB-INF/index.jsp
 <%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%> // if there is a form


pom.xml~*~*~*
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
    		<groupId>commons-validator</groupId>
    		<artifactId>commons-validator</artifactId>
    		<version>1.4.1</version>
		</dependency>
	</dependencies>

~*~*~*
Dolphin mySQL Workbench

INSERT INTO `roles` (name) VALUES ('ROLE_USER');
INSERT INTO `roles` (name) VALUES ('ROLE_ADMIN')

~*~*~*~*~*

@SessionAttributes("sessionAttribute")
public class Dashboard {
    @RequestMapping("/")
    public String index(@ModelAttribute("sessionAttribte") String sessionAttribute) {
        System.out.println(sessionAttribute);
        return "index";
    }
    @RequestMapping("/setSession")
    public String setSession(Model model){
        model.addAttribute("sessionAttribute", "exampleData");
        return "redirect:/";
    }
}

 @RequestMapping("/{part1}/dp/{productId}")
    public String showProduct(@PathVariable String part1, @PathVariable String productId){
    // ...
Copy
This would allow us to grab part1 and discard it

    @RequestMapping("/{part1}/dp/{part3}")
    public String showProduct(@PathVariable("part1") String discard, @PathVariable("part3") String productId){

post method ; 
@RequestMapping(path="/login", method=RequestMethod.POST)
    public String login() {

 @RequestMapping(path="/login", method=RequestMethod.POST)
    public String login(@RequestParam(value="username") String username, @RequestParam(value="password") String password) {
// ...

@Entity
public class Book {
    @Id
    @GeneratedValue
    private Long id;
    @Column
    @Size(min = 5, max = 200)
    private String title;
    
    @Column
    @Size(min = 5, max = 200)
    private String description;
    
    @Column
    @Size(min = 3, max = 40)
    private String language;
    
    @Column
    @Min(100)
    private int numberOfPages;
    // This will not allow the createdAt column to be updated after creation
    @Column(updatable=false)
    @DateTimeFormat(pattern = "MM/dd/yyyy HH:mm:ss")
    private Date createdAt;
    @Column
    @DateTimeFormat(pattern = "MM/dd/yyyy HH:mm:ss")
    private Date updatedAt;
}

@Repository
public interface BookRepository extends CrudRepository<Book, Long>{
}

public class BookService {
    private BookRepository bookRepository;
    public BookService(BookRepository bookRepository){
        this.bookRepository = bookRepository;
    }

@Repository
public interface BookRepository extends CrudRepository<Book, Long>{
    Listt<Book> findAll();
}


pom.xlm
dependencies



<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.apache.tomcat.embed</groupId>
    <artifactId>tomcat-embed-jasper</artifactId>
</dependency>
<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>jstl</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-devtools</artifactId>
    <scope>runtime</scope>
</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <scope>runtime</scope>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

time 
@PrePersist
	void createdAt() {
		this.createdAt = new Date();
	}
	
	@PreUpdate
	void updatedAt() {
		this.updatedAt = new Date();

jsp event creator jstl
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>


~*~*~*spring securuity; *~*~*
Set Up
Create a brand new application named auth and add the following dependencies:

0. pom.xml
spring-boot-starter-jpa
spring-boot-starter-web
mysql-connector-java (runtime)
tomcat-embed-jasper
jstl
NEW: spring-boot-starter-security*******
This is how your dependencies in the pom.xml file should look like:

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <scope>runtime</scope>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <scope>runtime</scope>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-tomcat</artifactId>
        <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.apache.tomcat.embed</groupId>
        <artifactId>tomcat-embed-jasper</artifactId>
    </dependency>
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
</dependencies>
~*~*~*
1. Models
User
Role

2. schema: auth(MySQL)

3. application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/auth
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.mvc.view.prefix: /WEB-INF/